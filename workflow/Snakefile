from pathlib import Path

KFOLDS=20
NSEEDS=5
DATAROOT = Path("/p/scratch/atmlaml/steinbach1/sota_on_uncertainties/data/")
IMGNSTEMS=[
"n01440764",
"n02102040",
"n02979186",
"n03000684",
"n03028079",
"n03394916",
"n03417042",
"n03425413",
"n03445777",
"n03888257"
    ]

rule compare_seed42_accuracies:
    input: "results/imagenette2_{chkpt}_meanstd.csv"
    output: "results/figures/imagenette2_compare_seed{seedval}_{chkpt}_meanstd.png"
    script:
        "scripts/plot_seed42_accuracies.py"

rule mean_std:
    input: "results/imagenette2_{chkpt}_metrics.csv"
    output: "results/imagenette2_{chkpt}_meanstd.csv"
    script:
        "scripts/mean_std.py"

rule seed42_histograms:
    input: "results/figures/imagenette2_last_seed42_histo.png",
           "results/figures/imagenette2_best_seed42_histo.png"

rule plot_seed42_histograms:
    input: "results/imagenette2_{chkpt}_metrics.csv"
    output: "results/figures/imagenette2_{chkpt}_seed{seedval}_histo.png"
    log: "results/figures/imagenette2_{chkpt}_seed{seedval}_histo.log"
    script:
        "scripts/plot_seed42_histo.py"

## distilling the summary data

rule imagenette2_summarized:
    input: "results/imagenette2_last_metrics.csv", "results/imagenette2_best_metrics.csv"

rule imagenette2_metrics_summary:
    input:
        expand("results/{arch}/seed42/fold-{fid:02.0f}/after80/{{chkpt}}_metrics.csv",
               arch="resnext50,resnet50,vit_small".split(','),
               fid=range(KFOLDS)),
        expand("results/{arch}/seed{seedval:02.0f}/fold-{fid:02.0f}/after80/{{chkpt}}_metrics.csv",
               arch="resnext50,resnet50,vit_small".split(','),
               seedval=range(1328,1328+NSEEDS),
               fid=range(KFOLDS))
        
    output: "results/imagenette2_{chkpt}_metrics.csv"
    script:
        "scripts/collect_dataframes.py"

rule metrics_from_topkids:
    input: "results/{arch}/seed{seedval}/{foldstem}/after80/{chkpttype}_topk_ids.csv"
    output: "results/{arch}/seed{seedval}/{foldstem}/after80/{chkpttype}_metrics.csv"
    log: "results/{arch}/seed{seedval}/{foldstem}/after80/{chkpttype}_accuracy.log"
    script:
        "scripts/metrics.py"
        

rule imagenette2_metrics:
    input:
        expand("results/{arch}/seed42/fold-{fid:02.0f}/after80/{chkpt}_metrics.csv",
               arch="resnext50,resnet50,vit_small".split(','),
               fid=range(KFOLDS),
               chkpt=["last","best"]),
        expand("results/{arch}/seed{seedval:02.0f}/fold-{fid:02.0f}/after80/{chkpt}_metrics.csv",
               arch="resnext50,resnet50,vit_small".split(','),
               seedval=range(1328,1328+NSEEDS),
               fid=range(KFOLDS),
               chkpt=["last","best"])


################################# Everything Below requires a GPU #################################

rule imagenette2_inference:
    input:
        expand("results/{arch}/seed42/fold-{fid:02.0f}/after80/{chkpt}_topk_ids.csv",
               arch="resnext50,resnet50,vit_small".split(','),
               fid=range(KFOLDS),
               chkpt=["last","best"]),
        expand("results/{arch}/seed{seedval:02.0f}/fold-{fid:02.0f}/after80/{chkpt}_topk_ids.csv",
               arch="resnext50,resnet50,vit_small".split(','),
               seedval=range(1328,1328+NSEEDS),
               fid=range(KFOLDS),
               chkpt=["last","best"])

rule imagenette2_inference_last:
    input:
        expand("results/{arch}/seed42/fold-{fid:02.0f}/after80/last_topk_ids.csv",
               arch="resnext50,resnet50,vit_small".split(','),
               fid=range(KFOLDS)),
        expand("results/{arch}/seed{seedval:02.0f}/fold-{fid:02.0f}/after80/last_topk_ids.csv",
               arch="resnext50,resnet50,vit_small".split(','),
               seedval=range(1328,1328+NSEEDS),
               fid=range(KFOLDS))

rule imagenette2_inference_best:
    input:
        expand("results/{arch}/seed42/fold-{fid:02.0f}/after80/best_topk_ids.csv",
               arch="resnext50,resnet50,vit_small".split(','),
               fid=range(KFOLDS)),
        expand("results/{arch}/seed{seedval:02.0f}/fold-{fid:02.0f}/after80/best_topk_ids.csv",
               arch="resnext50,resnet50,vit_small".split(','),
               seedval=range(1328,1328+NSEEDS),
               fid=range(KFOLDS))

rule imagenette_folds:
    input:
        expand(DATAROOT / "imagenette2-320-splits"/"fold-{fid:02.0f}/{category}",
               fid=range(KFOLDS),
               category="train val".split(' ')
               )

rule imagenette_all:
    input: expand(DATAROOT / "imagenette2-320-all/{dir}",dir=IMGNSTEMS)

rule imagenette_unpack:
    input: "imagenette2-320.tgz"
    output: rootdir=directory(DATAROOT / "data"),
            tocheck1=DATAROOT / "imagenette2-320/val/n02979186/n02979186_7492.JPEG",
            tocheck2=DATAROOT / "imagenette2-320/noisy_imagenette.csv"
    shell: "cd {output.rootdir} && tar xf ../{input}"


rule imagenette_combine:
    input: DATAROOT / "{dataset}" /"val"/"{classdir}",
           DATAROOT / "{dataset}" /"train"/"{classdir}"
    output: directory(DATAROOT / "{dataset}-all/{classdir}")
    shell: "mkdir -p {output[0]} && cp -vur {input[0]}/*JPEG {input[1]}/*JPEG {output[0]}"

rule create_tables:
    input: DATAROOT / "{dataset}-all"
    output: expand(DATAROOT / "{{dataset}}-splits"/"fold-{fid:02.0f}.table", fid=range(KFOLDS))
    script:
        "scripts/kfold.py"

rule imagenette_tables:
    input: expand(DATAROOT / "imagenette2-320-splits"/"fold-{fid:02.0f}.table", fid=range(KFOLDS))

rule fill_fold:
    input: DATAROOT / "{dataset}-splits"/"fold-{foldid}.table"
    output: directory(DATAROOT / "{dataset}-splits"/"fold-{foldid}"),
            directory(DATAROOT / "{dataset}-splits"/"fold-{foldid}/train"),
            directory(DATAROOT / "{dataset}-splits"/"fold-{foldid}/val")
    script:
        "scripts/linkin.py"

rule imagenette2_resnet50_default:
    input: DATAROOT/"imagenette2-320-splits"/"{foldstem}"
    output: directory("outputs/resnet50/seed{seedval}/{foldstem}/"),
            "outputs/resnet50/seed{seedval}/{foldstem}/after80/last.pth.tar",
            "outputs/resnet50/seed{seedval}/{foldstem}/after80/model_best.pth.tar"
    log: "outputs/resnet50/seed{seedval}/{foldstem}.log"
    shell: "time python timm-0.5.4-train.py {input} --seed {wildcards.seedval} --model resnet50 --num-classes=10 --output {output[0]} --checkpoint-hist 2 --epochs 80 --experiment after80 > {log} 2>&1"

rule imagenette2_resnext50_default:
    input: DATAROOT/"imagenette2-320-splits"/"{foldstem}"
    output: directory("outputs/resnext50/seed{seedval}/{foldstem}/"),
            "outputs/resnext50/seed{seedval}/{foldstem}/after80/last.pth.tar",
            "outputs/resnext50/seed{seedval}/{foldstem}/after80/model_best.pth.tar"
    log: "outputs/resnext50/seed{seedval}/{foldstem}.log"
    shell: "time python timm-0.5.4-train.py {input} --seed {wildcards.seedval} --num-classes=10 --output {output[0]} --experiment after80 --model resnext50_32x4d --checkpoint-hist 2 --lr 0.6 --warmup-epochs 5 --epochs 80 --weight-decay 1e-4 --sched cosine --reprob 0.4 --recount 3 --remode pixel --aa rand-m7-mstd0.5-inc1 -b 192 -j 6 --amp --dist-bn reduce > {log} 2>&1"

rule imagenette2_vit_small_default:
    input: DATAROOT/"imagenette2-320-splits"/"{foldstem}"
    output: directory("outputs/vit_small/seed{seedval}/{foldstem}/"),
            "outputs/vit_small/seed{seedval}/{foldstem}/after80/last.pth.tar",
            "outputs/vit_small/seed{seedval}/{foldstem}/after80/model_best.pth.tar"
    log: "outputs/vit_small/seed{seedval}/{foldstem}.log"
    shell: "time python timm-0.5.4-train.py {input} --seed {wildcards.seedval} --model vit_small_patch32_224 --num-classes=10 --output {output[0]} --checkpoint-hist 2 --epochs 80 --experiment after80 --mean 0.485 0.456 0.406 --std 0.229 0.224 0.225 -b 96 > {log} 2>&1"

rule imagenette2_train:
    input:
        expand("outputs/{arch}/seed42/fold-{fid:02.0f}/after80/last.pth.tar",
               arch="resnext50,resnet50,vit_small".split(','),
               fid=range(KFOLDS)),
        expand("outputs/{arch}/seed{seedval:02.0f}/fold-{fid:02.0f}/after80/last.pth.tar",
               arch="resnext50,resnet50,vit_small".split(','),
               seedval=range(1328,1328+NSEEDS),
               fid=range(KFOLDS))

rule imagenette2_train_default:
    input:
        expand("outputs/{arch}/seed42/fold-{fid:02.0f}/after80/last.pth.tar",
               arch="resnext50,resnet50,vit_small".split(','),
               fid=range(KFOLDS))

rule imagenette2_train_varseed:
    input:
        expand("outputs/{arch}/seed{seedval:02.0f}/fold-{fid:02.0f}/after80/last.pth.tar",
               arch="resnext50,resnet50,vit_small".split(','),
               seedval=range(1328,1328+NSEEDS),
               fid=range(KFOLDS))

rule imagenette2_vit_small_inference_best:
    input: "outputs/vit_small/seed{seedval}/{foldstem}/after80/model_best.pth.tar"
    output: "results/vit_small/seed{seedval}/{foldstem}/after80/best_topk_ids.csv"
    log: "results/vit_small/seed{seedval}/{foldstem}/after80-best_topk_ids.log"
    shell: "python timm-0.5.4-inference.py data/imagenette2-320-splits/{wildcards.foldstem}/val --checkpoint {input} --input-size 3 224 224 --num-classes 10 -o {output} --model vit_small_patch32_224 --with-csv-header --mean 0.485 0.456 0.406 --std 0.229 0.224 0.225 > {log} 2>&1"

rule imagenette2_resnet50_inference_best:
    input: "outputs/resnet50/seed{seedval}/{foldstem}/after80/model_best.pth.tar"
    output: "results/resnet50/seed{seedval}/{foldstem}/after80/best_topk_ids.csv"
    log: "results/resnet50/seed{seedval}/{foldstem}/after80-best_topk_ids.log"
    shell: "python timm-0.5.4-inference.py data/imagenette2-320-splits/{wildcards.foldstem}/val --checkpoint {input} --input-size 3 224 224 --num-classes 10 -o {output} --model resnet50 --with-csv-header --mean 0.485 0.456 0.406 --std 0.229 0.224 0.225 > {log} 2>&1"

rule imagenette2_resnext50_inference_best:
    input: "outputs/resnext50/seed{seedval}/{foldstem}/after80/model_best.pth.tar"
    output: "results/resnext50/seed{seedval}/{foldstem}/after80/best_topk_ids.csv"
    log: "results/resnext50/seed{seedval}/{foldstem}/after80-best_topk_ids.log"
    shell: "python timm-0.5.4-inference.py data/imagenette2-320-splits/{wildcards.foldstem}/val --checkpoint {input} --input-size 3 224 224 --num-classes 10 -o {output} --model resnext50_32x4d --with-csv-header --mean 0.485 0.456 0.406 --std 0.229 0.224 0.225 > {log} 2>&1"

# rule imagenette2_inference_summarize_best:
#     input: "results/{arch}/seed{seedval}/fold-{foldid}/after{nepochs}/best_topk_ids.csv"
#     output: "results/{arch}_seed{seedval}_fold-{foldid}_after{nepochs}_best_summary.csv"
#     script:
#         "scripts/metrics.py"

rule imagenette2_vit_small_inference_last:
    input: "outputs/vit_small/seed{seedval}/{foldstem}/after80/last.pth.tar"
    output: "results/vit_small/seed{seedval}/{foldstem}/after80/last_topk_ids.csv"
    log: "results/vit_small/seed{seedval}/{foldstem}/after80-last_topk_ids.log"
    shell: "python timm-0.5.4-inference.py data/imagenette2-320-splits/{wildcards.foldstem}/val --checkpoint {input} --input-size 3 224 224 --num-classes 10 -o {output} --model vit_small_patch32_224 --with-csv-header --mean 0.485 0.456 0.406 --std 0.229 0.224 0.225 > {log} 2>&1"

rule imagenette2_resnet50_inference_last:
    input: "outputs/resnet50/seed{seedval}/{foldstem}/after80/last.pth.tar"
    output: "results/resnet50/seed{seedval}/{foldstem}/after80/last_topk_ids.csv"
    log: "results/resnet50/seed{seedval}/{foldstem}/after80-last_topk_ids.log"
    shell: "python timm-0.5.4-inference.py data/imagenette2-320-splits/{wildcards.foldstem}/val --checkpoint {input} --input-size 3 224 224 --num-classes 10 -o {output} --model resnet50 --with-csv-header --mean 0.485 0.456 0.406 --std 0.229 0.224 0.225 > {log} 2>&1"

rule imagenette2_resnext50_inference_last:
    input: "outputs/resnext50/seed{seedval}/{foldstem}/after80/last.pth.tar"
    output: "results/resnext50/seed{seedval}/{foldstem}/after80/last_topk_ids.csv"
    log: "results/resnext50/seed{seedval}/{foldstem}/after80-last_topk_ids.log"
    shell: "python timm-0.5.4-inference.py data/imagenette2-320-splits/{wildcards.foldstem}/val --checkpoint {input} --input-size 3 224 224 --num-classes 10 -o {output} --model resnext50_32x4d --with-csv-header --mean 0.485 0.456 0.406 --std 0.229 0.224 0.225 > {log} 2>&1"

# rule imagenette2_inference_summarize_last:
#     input: "results/{arch}/seed{seedval}/fold-{foldid}/after{nepochs}/last_topk_ids.csv"
#     output: "results/{arch}_seed{seedval}_fold-{foldid}_after{nepochs}_last_summary.csv"
#     script:
#         "scripts/metrics.py"
